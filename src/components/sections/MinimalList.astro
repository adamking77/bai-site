---
interface Item {
  title: string;
  description: string;
  meta?: string;
}

export interface Props {
  title: string;
  items: Item[];
  numbered?: boolean;
}

const { title, items, numbered = false } = Astro.props;
---

<section class="py-16 md:py-20 lg:py-32 bg-foreground/5">
  <div class="max-w-5xl mx-auto px-4 sm:px-6 md:px-8 lg:px-12">
    <div class="grid grid-cols-1 lg:grid-cols-12 gap-8 md:gap-12 lg:gap-16">
      <div class="lg:col-span-5">
        <div class="sticky top-32">
          <h2 class="text-4xl md:text-5xl font-light leading-[1.3] tracking-tight text-foreground mb-8 heading-relaxed">
            {title}
          </h2>
          <div class="w-12 h-px bg-foreground/20"></div>
        </div>
      </div>
      
      <div class="lg:col-span-7">
        <div class="space-y-12">
          {items.map((item, index) => (
            <div class="group">
              <div class="flex items-start space-x-8 py-8 border-b border-foreground/10 last:border-b-0">
                {numbered && (
                  <div class="text-lg font-light text-foreground/30 w-8 flex-shrink-0">
                    {String(index + 1).padStart(2, '0')}
                  </div>
                )}
                <div class="flex-1 space-y-3">
                  <div class="flex items-center justify-between">
                    <h3 class="text-xl font-light text-foreground group-hover:text-custom-navy transition-colors duration-300">
                      {item.title}
                    </h3>
                    {item.meta && (
                      <div class="text-xs font-light text-foreground/50 tracking-wider uppercase">
                        {item.meta}
                      </div>
                    )}
                  </div>
                  <p class="text-base font-light text-foreground/70 leading-relaxed">
                    {item.description}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>